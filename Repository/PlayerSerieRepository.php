<?php

namespace VideoGamesRecords\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use VideoGamesRecords\CoreBundle\Tools\Ranking;

/**
 * PlayerSerieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlayerSerieRepository extends EntityRepository
{
    /**
     * @param array $params idSerie|idPlayer|limit|maxRank
     * @return array
     */
    public function getRankingPoints($params = [])
    {
        $query = $this->createQueryBuilder('ps')
            ->join('ps.player', 'p')
            ->addSelect('p')//----- for using ->getPlayer() on each result
            ->orderBy('ps.rankPoint');

        $query->where('ps.idSerie = :idSerie')
            ->setParameter('idSerie', $params['idSerie']);

        if (array_key_exists('limit', $params)) {
            $query->setMaxResults($params['limit']);
        }

        $row = null;
        if ((array_key_exists('idPlayer', $params)) && ($params['idPlayer'] !== null)) {
            $row = $this->findOneBy(
                [
                    'idSerie' => $params['idSerie'],
                    'idPlayer' => $params['idPlayer']
                ]
            );
        }

        if ((array_key_exists('maxRank', $params)) && ($row)) {
            $query->andWhere('(us.rankPoint <= :maxRank OR us.rankPoint BETWEEN :min AND :max)')
                ->setParameter('maxRank', $params['maxRank'])
                ->setParameter('min', $row->getRankPoint() - 5)
                ->setParameter('max', $row->getRankPoint() + 5);
        } else if (array_key_exists('maxRank', $params)) {
            $query->andWhere('us.rankPoint <= :maxRank')
                ->setParameter('maxRank', $params['maxRank']);
        }
        return $query->getQuery()->getResult();
    }


    /**
     * @param array $params idSerie|idPlayer|limit|maxRank
     * @return array
     */
    public function getRankingMedals($params = [])
    {
        $query = $this->createQueryBuilder('ps')
            ->join('ps.player', 'p')
            ->addSelect('p')//----- for using ->getPlayer() on each result
            ->orderBy('ps.rankMedal');

        $query->where('ps.idSerie = :idSerie')
            ->setParameter('idSerie', $params['idSerie']);

        if (array_key_exists('limit', $params)) {
            $query->setMaxResults($params['limit']);
        }

        $row = null;
        if ((array_key_exists('idPlayer', $params)) && ($params['idPlayer'] !== null)) {
            $row = $this->findOneBy(
                [
                    'idSerie' => $params['idSerie'],
                    'idPlayer' => $params['idPlayer']
                ]
            );
        }

        if ((array_key_exists('maxRank', $params)) && ($row)) {
            $query->andWhere('(us.rankMedal <= :maxRank OR us.rankMedal BETWEEN :min AND :max)')
                ->setParameter('maxRank', $params['maxRank'])
                ->setParameter('min', $row->getRankMedal() - 5)
                ->setParameter('max', $row->getRankMedal() + 5);
        } else if (array_key_exists('maxRank', $params)) {
            $query->andWhere('us.rankMedal <= :maxRank')
                ->setParameter('maxRank', $params['maxRank']);
        }
        return $query->getQuery()->getResult();
    }

    /**
     * @param $idSerie
     */
    public function maj($idSerie)
    {
        // Delete old data
        $query = $this->_em->createQuery('DELETE VideoGamesRecords\CoreBundle\Entity\PlayerSerie us WHERE us.idSerie = :idSerie');
        $query->setParameter('idSerie', $idSerie);
        $query->execute();

        // Select data
        $query = $this->_em->createQuery("
            SELECT
                pg.idPlayer,
                (g.idSerie) as idSerie,
                '' as rankPoint,
                '' as rankMedal,
                SUM(pg.rank0) as rank0,
                SUM(pg.rank1) as rank1,
                SUM(pg.rank2) as rank2,
                SUM(pg.rank3) as rank3,
                SUM(pg.rank4) as rank4,
                SUM(pg.rank5) as rank5,
                SUM(pg.pointGame) as pointGame,
                SUM(pg.pointChart) as pointChart,
                SUM(pg.pointChartWithoutDlc) as pointChartWithoutDlc,
                SUM(pg.nbChart) as nbChart,
                SUM(pg.nbChartWithoutDlc) as nbChartWithoutDlc,
                SUM(pg.nbChartProven) as nbChartProven,
                SUM(pg.nbChartProvenWithoutDlc) as nbChartProvenWithoutDlc,
                COUNT(DISTINCT ug.idGame) as nbGame
            FROM VideoGamesRecords\CoreBundle\Entity\PlayerGame pg
            JOIN pg.game g
            WHERE g.idSerie = :idSerie
            GROUP BY pg.idPlayer
            ORDER BY pointChart DESC");

        $query->setParameter('idSerie', $idSerie);
        $result = $query->getResult();

        $list = [];
        foreach ($result as $row) {
            $list[] = $row;
        }

        $list = Ranking::addRank($list, 'rankPoint', ['pointChart']);
        $list = Ranking::order($list, ['rank0' => 'DESC', 'rank1' => 'DESC', 'rank2' => 'DESC', 'rank3' => 'DESC']);
        $list = Ranking::addRank($list, 'rankMedal', ['rank0', 'rank1', 'rank2', 'rank3', 'rank4', 'rank5']);

        $normalizer = new ObjectNormalizer();
        $serializer = new Serializer([$normalizer]);

        $serie = $this->_em->find('VideoGamesRecords\CoreBundle\Entity\Serie', $idSerie);

        foreach ($list as $row) {
            $playerSerie = $serializer->denormalize(
                $row,
                'VideoGamesRecords\CoreBundle\Entity\PlayerSerie'
            );
            $playerSerie->setPlayer($this->_em->getReference('VideoGamesRecords\CoreBundle\Entity\Player', $row['idPlayer']));
            $playerSerie->setSerie($serie);

            $this->_em->persist($playerSerie);
            $this->_em->flush($playerSerie);
        }
    }
}
