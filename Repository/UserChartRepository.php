<?php

namespace VideoGamesRecords\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * UserChartRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserChartRepository extends EntityRepository
{
    /**
     * @param array $params idChart|idLogin|limit|maxRank
     * @todo
     * => Join etat to keep only boolRanking = 1
     * => If idLogin, search for the rank and display a range of -5 and +5
     * @return array
     */
    public function getRanking($params = array())
    {

        $chart = $params['chart'];

        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('VideoGamesRecords\CoreBundle\Entity\UserChart', 'uc', 'uc');
        $rsm->addFieldResult('uc','idChart','idChart');
        $rsm->addFieldResult('uc','idUser','idUser');
        $rsm->addFieldResult('uc','rank','rank');
        $rsm->addFieldResult('uc','nbEqual','nbEqual');
        $rsm->addFieldResult('uc','pointChart','pointChart');
        $rsm->addFieldResult('uc','idEtat','idEtat');
        $rsm->addFieldResult('uc','dateModif','dateModif');
        //$rsm->addJoinedEntityResult('VideoGamesRecords\CoreBundle\Entity\User' , 'u', 'uc', 'user');
        //$rsm->addFieldResult('u','pseudo','pseudo');
        //$rsm->addFieldResult('u','idMembre','idMembre');

        $fields = array();
        $orders = array();
        $where = array();
        $parameters = array();

        $fields[] = 'uc.*';
        $fields[] = 'u.*';

        $where[] = 'uc.idChart = :idChart';
        $parameters['idChart'] = $params['idChart'];

        foreach ($chart->getLibs() as $lib) {
            $columnName = "value_" . $lib->getIdLibChart();
            $fields[] = "(SELECT value FROM vgr_user_chartlib WHERE idLibchart=" . $lib->getIdLibChart() . " AND idUser = uc.idUser) AS $columnName";
            $orders[] = $columnName . " " . $lib->getType()->getOrderBy();
            $rsm->addScalarResult($columnName, $columnName);
        }


        if ( (array_key_exists('maxRank', $params)) && (array_key_exists('idLogin', $params)) ) {
            $where[] = '(uc.rank <= :maxRank OR uc.idMembre = :idLogin)';
            $parameters['maxRank'] = $params['maxRank'];
            $parameters['idLogin'] = $params['idLogin'];
        } else if (array_key_exists('maxRank', $params)) {
            $where[] = 'uc.rank <= :maxRank';
            $parameters['maxRank'] = $params['maxRank'];
        }



        $sql = sprintf("SELECT %s
            FROM vgr_user_chart uc INNER JOIN t_membre u ON uc.idUser = u.idUser
            WHERE %s ORDER BY %s",
            implode(',', $fields),
            implode(' AND ', $where),
            implode(',', $orders)
        );

        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        foreach ($parameters as $key => $value) {
            $query->setParameter($key, $value);
        }

        //var_dump($query->getResult()); exit;
        return $query->getResult();

    }


}
