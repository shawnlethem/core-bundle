<?php

namespace VideoGamesRecords\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserSerieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserSerieRepository extends EntityRepository
{
    /**
     * @param array $params idSerie|idLogin|limit|maxRank
     * @return array
     */
    public function getRankingPoints($params = array())
    {
        $query = $this->createQueryBuilder('us')
            ->join('us.user', 'u')
            ->addSelect('u') //----- for using ->getUser() on each result
            ->orderBy('us.rankPoint');

        $query->where('us.idSerie = :idSerie')
            ->setParameter('idSerie', $params['idSerie']);

        if (array_key_exists('limit', $params)) {
            $query->setMaxResults($params['limit']);
        }

        $row = null;
        if ((array_key_exists('idLogin', $params)) && ($params['idLogin'] != null)) {
            $row = $this->findOneBy(
                array(
                    'idSerie' => $params['idSerie'],
                    'idMembre' => $params['idLogin']
                )
            );
        }

        if ( (array_key_exists('maxRank', $params)) && ($row) ) {
            $query->andWhere('(us.rankPoint <= :maxRank OR us.rankPoint BETWEEN :min AND :max)')
                ->setParameter('maxRank', $params['maxRank'])
                ->setParameter('min', $row->getRankPoint() - 5)
                ->setParameter('max', $row->getRankPoint() + 5);
        } else if (array_key_exists('maxRank', $params)) {
            $query->andWhere('us.rankPoint <= :maxRank')
                ->setParameter('maxRank', $params['maxRank']);
        }
        return $query->getQuery()->getResult();
    }


    /**
     * @param array $params idSerie|idLogin|limit|maxRank
     * @return array
     */
    public function getRankingMedals($params = array())
    {
        $query = $this->createQueryBuilder('us')
            ->join('us.user', 'u')
            ->addSelect('u') //----- for using ->getUser() on each result
            ->orderBy('us.rankMedal');

        $query->where('us.idSerie = :idSerie')
            ->setParameter('idSerie', $params['idSerie']);

        if (array_key_exists('limit', $params)) {
            $query->setMaxResults($params['limit']);
        }

        $row = null;
        if ((array_key_exists('idLogin', $params)) && ($params['idLogin'] != null)) {
            $row = $this->findOneBy(
                array(
                    'idSerie' => $params['idSerie'],
                    'idMembre' => $params['idLogin']
                )
            );
        }

        if ( (array_key_exists('maxRank', $params)) && ($row) ) {
            $query->andWhere('(us.rankMedal <= :maxRank OR us.rankMedal BETWEEN :min AND :max)')
                ->setParameter('maxRank', $params['maxRank'])
                ->setParameter('min', $row->getRankMedal() - 5)
                ->setParameter('max', $row->getRankMedal() + 5);
        } else if (array_key_exists('maxRank', $params)) {
            $query->andWhere('us.rankMedal <= :maxRank')
                ->setParameter('maxRank', $params['maxRank']);
        }
        return $query->getQuery()->getResult();
    }
}
