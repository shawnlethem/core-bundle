resources:
    VideoGamesRecords\CoreBundle\Entity\Game:
        collectionOperations:
            get:
                normalization_context: {'groups': [game.list]}
                pagination_use_output_walkers: true
            list-by-letter:
                method: 'GET'
                normalization_context: { 'groups': [ game.list, game.platforms, platform.read ] }
                path: '/games-list-by-letter'
                swagger_context:
                    parameters:
                        -   name: letter
                            in: query
                            required: false
                            type: string
                controller: 'VideoGamesRecords\CoreBundle\Controller\Game\GetListByLetter'
                defaults:
                    _api_receive: false
            autocomplete:
                method: 'GET'
                normalization_context: { 'groups': [ game.read.mini ] }
                path: '/games/autocomplete'
                swagger_context:
                    parameters:
                        -   name: query
                            in: query
                            required: true
                            type: string
                controller: 'VideoGamesRecords\CoreBundle\Controller\Game\Autocomplete'
        itemOperations:
            get:
                normalization_context: {'groups': [game.read, game.platforms, platform.read, game.serie, serie.read.mini]}
            form-data:
                method: 'GET'
                normalization_context: { 'groups': [ chart.read, chart.group, group.read.mini, chart.libs, chartLib.read, chart.playerCharts, playerChart.read, playerChart.chart, playerChart.player, playerChart.libs, playerChart.status, playerChartStatus.read, playerChart.platform ], 'enable_max_depth': true }
                access_control: 'is_granted("ROLE_PLAYER")'
                path: '/games/{id}/form-data'
                swagger_context:
                    parameters:
                        -   name: id
                            in: path
                            required: true
                            type: integer
                        -   name: libChart
                            in: query
                            required: false
                            type: string
                controller: 'VideoGamesRecords\CoreBundle\Controller\Game\GetFormData'
            player-ranking-points:
                method: 'GET'
                normalization_context: {'groups': [playerGame.pointChart,playerGame.player,player.read.mini,player.team,team.read.mini,player.country,country.read]}
                path: '/games/{id}/player-ranking-points'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\Game\Player\GetRankingPoints'
            player-ranking-medals:
                method: 'GET'
                normalization_context: {'groups': [playerGame.medal,playerGame.player,player.read.mini,player.team,team.read.mini,player.country,country.read]}
                path: '/games/{id}/player-ranking-medals'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\Game\Player\GetRankingMedals'
            team-ranking-points:
                method: 'GET'
                normalization_context: {'groups': [teamGame.pointChart, teamGame.team, team.read.mini]}
                path: '/games/{id}/team-ranking-points'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\Game\Team\GetRankingPoints'
            team-ranking-medals:
                method: 'GET'
                normalization_context: {'groups': [teamGame.medal, teamGame.team, team.read.mini]}
                path: '/games/{id}/team-ranking-medals'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\Game\Team\GetRankingMedals'
        properties:
            groups:
                subresource:
                    resourceClass: 'VideoGamesRecords\CoreBundle\Entity\Group'
                    collection: true
            topics:
                subresource:
                    resourceClass: 'VideoGamesRecords\CoreBundle\Entity\GameTopic'
                    collection: true
            videos:
                subresource:
                    resourceClass: 'VideoGamesRecords\CoreBundle\Entity\Video'
                    collection: true
