services:
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
        # fetching services directly from the container via $container->get() won't work.
        # The best practice is to be explicit about your dependencies anyway.
    VideoGamesRecords\CoreBundle\:
        resource: '../../*'
        exclude: '../../{Admin,DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
    vgr.playerChartValueSubscriber:
        class:  VideoGamesRecords\CoreBundle\EventSubscriber\PlayerChartValueSubscriber
        tags: [ { name: 'kernel.event_subscriber'} ]
    vgr.playerBadgeSetTitleSubscriber:
        arguments:
            - '@translator'
        class: VideoGamesRecords\CoreBundle\EventSubscriber\PlayerBadgeSetTitleSubscriber
        tags: [ { name: 'kernel.event_subscriber' } ]
    vgr.core.event.entity.game:
        class: VideoGamesRecords\CoreBundle\EventListener\Entity\GameListener
        tags:
            - { name: doctrine.orm.entity_listener }
    vgr.core.event.entity.chart:
        class: VideoGamesRecords\CoreBundle\EventListener\Entity\ChartListener
        tags:
            - { name: doctrine.orm.entity_listener }
    vgr.core.event.entity.playerchart:
        class: VideoGamesRecords\CoreBundle\EventListener\Entity\PlayerChartListener
        arguments:
            - '@VideoGamesRecords\CoreBundle\Service\Stats\Write\GameStatsHandler'
            - '@VideoGamesRecords\CoreBundle\Service\Stats\Write\GroupStatsHandler'
        tags:
            - { name: doctrine.orm.entity_listener }
    vgr.core.event.entity.player:
        class: VideoGamesRecords\CoreBundle\EventListener\Entity\PlayerListener
        arguments:
            - '@VideoGamesRecords\CoreBundle\Service\UpdateChartStatusHandler'
        tags:
            - { name: doctrine.orm.entity_listener }
    vgr.core.event.entity.team:
        class: VideoGamesRecords\CoreBundle\EventListener\Entity\TeamListener
        arguments:
            - '@security.helper'
            - '@VideoGamesRecords\CoreBundle\DataTransformer\UserToPlayerTransformer'
        tags:
            - { name: doctrine.orm.entity_listener }
    admin.block.service.proof.games:
        class: VideoGamesRecords\CoreBundle\Block\Service\ProofGamesBlockService
        public: true
        tags:
            - { name: "sonata.block" }




