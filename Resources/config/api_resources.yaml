resources:
    VideoGamesRecords\CoreBundle\Entity\Serie:
        collectionOperations:
            get: ~
            post: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\Game:
        collectionOperations:
            get:
                filters: ['game.status_filter','platform_filter']
        itemOperations:
            get:
                normalization_context: {'groups': [game_show, platform_show]}
            list-by-letter:
                method: 'GET'
                normalization_context: {'groups': [game_list, platform_show]}
                path: '/game/list-by-letter'
                swagger_context:
                    parameters:
                        - name: letter
                          in: query
                          required: false
                          type: string
                        - name: locale
                          in: query
                          required: false
                          type: string
                controller: 'VideoGamesRecords\CoreBundle\Controller\GameController::listByLetter'
                defaults:
                      _api_receive: false
            player-ranking-points:
                method: 'GET'
                normalization_context: {'groups': [ranking_point]}
                path: '/game/{id}/player-ranking-points'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                        - name: idPlayer
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GameController::playerRankingPoints'
            player-ranking-medals:
                method: 'GET'
                normalization_context: {'groups': [ranking_medal]}
                path: '/game/{id}/player-ranking-medals'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                        - name: idPlayer
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GameController::playerRankingMedals'
            team-ranking-points:
                method: 'GET'
                path: '/game/{id}/team-ranking-points'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                        - name: idPlayer
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GameController::teamRankingPoints'
            team-ranking-medals:
                method: 'GET'
                path: '/game/{id}/team-ranking-medals'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                        - name: idPlayer
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GameController::teamRankingMedals'
        properties:
            groups:
                subresource:
                    resourceClass: 'VideoGamesRecords\CoreBundle\Entity\Group'
                    collection: true
    VideoGamesRecords\CoreBundle\Entity\Group:
        collectionOperations:
            get: ~
        itemOperations:
            get:
                normalization_context: {'groups': [group_show, platform_show]}
            player-ranking-points:
                method: 'GET'
                normalization_context: {'groups': [ranking_point]}
                path: '/group/{id}/player-ranking-points'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                        - name: idPlayer
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GroupController::playerRankingPoints'
            player-ranking-medals:
                method: 'GET'
                normalization_context: {'groups': [ranking_medal]}
                path: '/group/{id}/player-ranking-medals'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                        - name: idPlayer
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GroupController::playerRankingMedals'
            team-ranking-points:
                method: 'GET'
                path: '/group/{id}/team-ranking-points'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                        - name: idPlayer
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GroupController::teamRankingPoints'
            team-ranking-medals:
                method: 'GET'
                path: '/group/{id}/team-ranking-medals'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                        - name: idPlayer
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GroupController::teamRankingMedals'
        properties:
            charts:
                subresource:
                    resourceClass: 'VideoGamesRecords\CoreBundle\Entity\Chart'
                    collection: true
    VideoGamesRecords\CoreBundle\Entity\Chart:
        collectionOperations:
            get: ~
        itemOperations:
            get:
                normalization_context: {'groups': [chart_show, platform_show]}
            player-ranking:
                method: 'GET'
                normalization_context: {'groups': [player_show, ranking]}
                path: '/chart/{id}/player-ranking'
                swagger_context:
                    summary: 'Retrive ranking of a chart'
                controller: 'VideoGamesRecords\CoreBundle\Controller\ChartController::playerRanking'
                defaults:
                    _api_receive: false
    VideoGamesRecords\CoreBundle\Entity\PlayerChartStatus:
        collectionOperations:
            get: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\PlayerGame:
        collectionOperations:
            get: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\PlayerGroup:
        collectionOperations:
            get: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\PlayerChart:
        attributes:
            normalization_context:
                groups: ['playerChart.read']
            denormalization_context:
                groups: ['playerChart.write']
        collectionOperations:
            get:
                filters : ['playerChart.player_filter','playerChart.chart_filter']
            getOne:
                method: 'GET'
                path: '/player_charts/get-one'
                swagger_context:
                    summary: 'Retrive an playerChart object (maybe juste initialized)'
                    parameters:
                        - name: idPlayer
                          in: query
                          required: true
                          type: integer
                        - name: idChart
                          in: query
                          required: true
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\PlayerChartController::getOne'
            post: ~
        itemOperations:
            get:
                normalization_context: {'groups': [playerChart_show, playerChart.read]}
            put:
                normalization_context: {'groups': [playerChart.write, playerChart.write]}
                _api_receive: true
    VideoGamesRecords\CoreBundle\Entity\Player:
        collectionOperations:
            get: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\Platform:
        attributes:
            pagination_enabled: false
        collectionOperations:
            get: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\ChartLib:
        collectionOperations:
            get: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\PlayerChartLib:
        collectionOperations:
            get: ~
        itemOperations:
            get: ~
