resources:
    VideoGamesRecords\CoreBundle\Entity\Serie:
        collectionOperations:
            get:
                normalization_context: {'groups': [serie.list]}
        itemOperations:
            get:
                normalization_context: {'groups': [serie.read]}
    VideoGamesRecords\CoreBundle\Entity\Game:
        collectionOperations:
            get:
                normalization_context: {'groups': [game.list]}
                pagination_use_output_walkers: true
        itemOperations:
            get:
                normalization_context: {'groups': [game.read, game.platforms, platform.read]}
            list-by-letter:
                method: 'GET'
                normalization_context: {'groups': [game.list, game.platforms, platform.read]}
                path: '/games-list-by-letter'
                swagger_context:
                    parameters:
                        - name: letter
                          in: query
                          required: false
                          type: string
                controller: 'VideoGamesRecords\CoreBundle\Controller\GameController::listByLetter'
                defaults:
                    _api_receive: false
            lost-position:
                method: 'GET'
                normalization_context: {'groups': [game.read.mini]}
                access_control: 'is_granted("ROLE_PLAYER")'
                path: '/games-player-lost-position'
                controller: 'VideoGamesRecords\CoreBundle\Controller\GameController::listFromPlayerLostPosition'
                defaults:
                    _api_receive: false
            player-ranking-points:
                method: 'GET'
                normalization_context: {'groups': [playerGame.pointChart,playerGame.player,player.read.mini,player.team,team.read.mini,player.country,player.country.read]}
                path: '/games/{id}/player-ranking-points'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GameController::playerRankingPoints'
            player-ranking-medals:
                method: 'GET'
                normalization_context: {'groups': [playerGame.medal,playerGame.player,player.read.mini,player.team,team.read.mini,player.country,player.country.read]}
                path: '/games/{id}/player-ranking-medals'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GameController::playerRankingMedals'
            team-ranking-points:
                method: 'GET'
                normalization_context: {'groups': [teamGame.pointChart, teamGame.team, team.read.mini]}
                path: '/games/{id}/team-ranking-points'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GameController::teamRankingPoints'
            team-ranking-medals:
                method: 'GET'
                normalization_context: {'groups': [teamGame.medal, teamGame.team, team.read.mini]}
                path: '/games/{id}/team-ranking-medals'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GameController::teamRankingMedals'
        properties:
            groups:
                subresource:
                    resourceClass: 'VideoGamesRecords\CoreBundle\Entity\Group'
                    collection: true
            topics:
                subresource:
                    resourceClass: 'VideoGamesRecords\CoreBundle\Entity\GameTopic'
                    collection: true
            videos:
                subresource:
                    resourceClass: 'VideoGamesRecords\CoreBundle\Entity\Video'
                    collection: true
    VideoGamesRecords\CoreBundle\Entity\Group:
        attributes:
            pagination_enabled: false
        subresourceOperations:
            api_games_groups_get_subresource:
                method: 'GET'
                normalization_context: {'groups': [group.list]}
        collectionOperations:
            get:
                normalization_context: {'groups': [group.list]}
        itemOperations:
            get:
                normalization_context: {'groups': [group.read]}
            player-ranking-points:
                method: 'GET'
                normalization_context: {'groups': [playerGroup.pointChart,playerGroup.player,player.read.mini,player.team,team.read.mini,player.country,player.country.read]}
                path: '/groups/{id}/player-ranking-points'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GroupController::playerRankingPoints'
            player-ranking-medals:
                method: 'GET'
                normalization_context: {'groups': [playerGroup.medal,playerGroup.player,player.read.mini,player.team,team.read.mini,player.country,player.country.read]}
                path: '/groups/{id}/player-ranking-medals'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GroupController::playerRankingMedals'
            team-ranking-points:
                method: 'GET'
                normalization_context: {'groups': [teamGroup.pointChart, teamGroup.team, team.read.mini]}
                path: '/groups/{id}/team-ranking-points'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GroupController::teamRankingPoints'
            team-ranking-medals:
                method: 'GET'
                normalization_context: {'groups': [teamGroup.medal, teamGroup.team, team.read.mini]}
                path: '/groups/{id}/team-ranking-medals'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GroupController::teamRankingMedals'
            top-score:
                method: 'GET'
                normalization_context: {'groups': [chart.read, chart.top-score, playerChart.libs, playerChartLib.format, playerChart.player, player.read.mini]}
                path: '/groups/{id}/top-score'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\GroupController::topScore'
        properties:
            charts:
                subresource:
                    resourceClass: 'VideoGamesRecords\CoreBundle\Entity\Chart'
                    collection: true
    VideoGamesRecords\CoreBundle\Entity\Chart:
        subresourceOperations:
            api_groups_charts_get_subresource:
                method: 'GET'
                normalization_context: {'groups': [chart.list]}
        collectionOperations:
            get:
                normalization_context: {'groups': [chart.list], 'enable_max_depth':true}
            with-player-chart:
                method: 'GET'
                normalization_context: {'groups': [chart.read, chart.group, group.read.mini, chart.libs, chartLib.read, chart.playerCharts, playerChart.read, playerChart.libs, playerChart.platform], 'enable_max_depth':true}
                access_control: 'is_granted("ROLE_PLAYER")'
                path: '/charts/with-player-chart'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: idGame
                          in: query
                          required: false
                          type: integer
                        - name: idGroup
                          in: query
                          required: false
                          type: integer
                        - name: idChart
                          in: query
                          required: false
                          type: integer
                        - name: libChart
                          in: query
                          required: false
                          type: string
                controller: 'VideoGamesRecords\CoreBundle\Controller\ChartController::charts'
        itemOperations:
            get:
                normalization_context: {'groups': [chart.read, chart.libs, chartLib.read]}
            team-ranking:
                method: 'GET'
                normalization_context: {'groups': [teamChart.pointChart, teamChart.team, team.read.mini]}
                path: '/charts/{id}/team-ranking'
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - name: maxRank
                          in: query
                          required: false
                          type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\ChartController::teamRanking'
            player-ranking:
                method: 'GET'
                normalization_context: {'groups': [playerChart.ranking,playerChart.player,playerChart.platform,platform.read.mini,player.read.mini,playerChart.status,playerChartStatus.read,player.team,team.read.mini,player.country,player.country.read]}
                path: '/charts/{id}/player-ranking'
                swagger_context:
                    summary: 'Retrive ranking of a chart'
                controller: 'VideoGamesRecords\CoreBundle\Controller\ChartController::playerRanking'
                defaults:
                    _api_receive: false
            player-ranking-points:
                method: 'GET'
                normalization_context: {'groups': [playerChart.pointChart,playerChart.player,player.read.mini,player.team,team.read.mini,player.country,player.country.read]}
                path: '/charts/{id}/player-ranking-points'
                swagger_context:
                    parameters:
                        -   name: id
                            in: path
                            required: true
                            type: integer
                        -   name: maxRank
                            in: query
                            required: false
                            type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\ChartController::playerRankingPoints'
    VideoGamesRecords\CoreBundle\Entity\PlayerBadge:
        collectionOperations:
            get:
                normalization_context: {'groups': [playerBadge.read, playerBadge.badge, badge.read]}
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\PlayerChartStatus:
        collectionOperations:
            get: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\PlayerGame:
        collectionOperations:
            get: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\PlayerGroup:
        collectionOperations:
            get: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\PlayerChart:
        attributes:
            normalization_context: {'groups': [playerChart.read, playerChart.libs]}
            denormalization_context: {'groups': [playerChart.write]}
        collectionOperations:
            get: ~
            post:
                access_control: 'is_granted("ROLE_PLAYER")'
            maj-platform:
                method: 'POST'
                path: '/player-charts/maj-platform'
                access_control: 'is_granted("ROLE_PLAYER")'
                swagger_context:
                    parameters:
                        - in: body
                          name: playerChart
                          schema:
                              type: object
                              required:
                                  - idGame
                                  - idPlatform
                              properties:
                                  idGame:
                                      type: integer
                                  idPlatform:
                                      type: integer
                controller: 'VideoGamesRecords\CoreBundle\Controller\PlayerChartController::majPlatform'
        itemOperations:
            get:
                normalization_context: {'groups': [playerChart.read, playerChart.libs, playerChart.player, player.read.mini, playerChart.status, playerChartStatus.read, chart.label.read, playerChartLib.format, playerChart.proof, proof.read, picture.read]}
            put:
                normalization_context: {'groups': [playerChart.write]}
                access_control: 'is_granted("ROLE_PLAYER") and object.getPlayer().getUser() == user'
                _api_receive: true
    VideoGamesRecords\CoreBundle\Entity\Player:
        collectionOperations:
            get: ~
            stats:
                method: 'GET'
                path: '/players/stats'
                controller: 'VideoGamesRecords\CoreBundle\Controller\PlayerController::stats'
            player-ranking-point-chart:
                method: 'GET'
                normalization_context: {'groups': [player.read.mini,player.pointChart,player.team,team.read.mini,player.country,player.country.read]}
                path: '/players/ranking-point-chart'
                controller: 'VideoGamesRecords\CoreBundle\Controller\PlayerController::rankingPointChart'
            player-ranking-point-game:
                method: 'GET'
                normalization_context: {'groups': [player.read.mini,player.pointGame,player.team,team.read.mini,player.country,player.country.read]}
                path: '/players/ranking-point-game'
                controller: 'VideoGamesRecords\CoreBundle\Controller\PlayerController::rankingPointGame'
            player-ranking-point-game-home:
                method: 'GET'
                normalization_context: {'groups': [player.read.mini,player.pointGame,player.team,team.read.mini]}
                path: '/players/ranking-point-game-top-5'
                controller: 'VideoGamesRecords\CoreBundle\Controller\PlayerController::rankingPointGameTop5'
            player-ranking-medal:
                method: 'GET'
                normalization_context: {'groups': [player.read.mini,player.medal,player.team,team.read.mini,player.country,player.country.read]}
                path: '/players/ranking-medal'
                controller: 'VideoGamesRecords\CoreBundle\Controller\PlayerController::rankingMedal'
            player-ranking-cup:
                method: 'GET'
                normalization_context: {'groups': [player.read.mini,player.cup,player.team,team.read.mini,player.country,player.country.read]}
                path: '/players/ranking-cup'
                controller: 'VideoGamesRecords\CoreBundle\Controller\PlayerController::rankingCup'
            player-ranking-cup-home:
                method: 'GET'
                normalization_context: {'groups': [player.read.mini,player.cup,player.team,team.read.mini]}
                path: '/players/ranking-cup-top-5'
                controller: 'VideoGamesRecords\CoreBundle\Controller\PlayerController::rankingCupTop5'
            player-ranking-badge:
                method: 'GET'
                normalization_context: {'groups': [player.read.mini,player.badge,player.team,team.read.mini,player.country,player.country.read]}
                path: '/players/ranking-badge'
                controller: 'VideoGamesRecords\CoreBundle\Controller\PlayerController::rankingBadge'
            player-ranking-proof:
                method: 'GET'
                normalization_context: {'groups': [player.read,player.proof,player.team,team.read.mini,player.country,player.country.read]}
                path: '/players/ranking-proof'
                controller: 'VideoGamesRecords\CoreBundle\Controller\PlayerController::rankingProof'
            profile:
                method: 'GET'
                access_control: 'is_granted("IS_AUTHENTICATED_FULLY")'
                normalization_context: {'groups': [user.profile,player.read.mini,team.read.mini]}
                path: '/players/profile'
                controller: 'VideoGamesRecords\CoreBundle\Controller\AuthController::profile'
            profile-team:
                method: 'GET'
                access_control: 'is_granted("IS_AUTHENTICATED_FULLY")'
                normalization_context: {'groups': [team.read.mini, team.leader], 'enable_max_depth':true}
                path: '/players/profile-team'
                controller: 'VideoGamesRecords\CoreBundle\Controller\AuthController::profileTeam'
            profile-player:
                method: 'GET'
                access_control: 'is_granted("IS_AUTHENTICATED_FULLY")'
                normalization_context: {'groups': [player.read.mini]}
                path: '/players/profile-player'
                controller: 'VideoGamesRecords\CoreBundle\Controller\AuthController::profilePlayer'
            autocomplete:
                method: 'GET'
                normalization_context: {'groups': [player.read.mini]}
                path: '/players/autocomplete'
                swagger_context:
                    parameters:
                        - name: query
                          in: query
                          required: true
                          type: string
                controller: 'VideoGamesRecords\CoreBundle\Controller\PlayerController::autocomplete'
        itemOperations:
            get:
                normalization_context: {'groups': [player.read, player.team, team.read.mini, player.user, vgr.user.read, player.country, player.country.read, player.cup, player.medal, player.proof, player.badge, player.pointGame, player.pointChart]}
            put:
                access_control: 'is_granted("ROLE_PLAYER") and object.getUser() == user'
                denormalization_context: {'groups': [player.put]}
                normalization_context: {'groups': [player.read.mini, player.team, team.read.mini]}
    VideoGamesRecords\CoreBundle\Entity\Platform:
        attributes:
            pagination_enabled: false
        collectionOperations:
            get:
                normalization_context: {'groups': [platform.read]}
        itemOperations:
            get:
                normalization_context: {'groups': [platform.read]}
    VideoGamesRecords\CoreBundle\Entity\ChartLib:
        properties:
            idLibChart:
                identifier: true
        collectionOperations:
            get: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\ChartType:
        properties:
            idType:
                identifier: true
        collectionOperations:
            get: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\PlayerChartLib:
        collectionOperations:
            get: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\Team:
        collectionOperations:
            post:
                access_control: 'is_granted("ROLE_PLAYER")'
                denormalization_context: {'groups': [team.put]}
                normalization_context: {'groups': [team.profile, team.leader, player.read.mini]}
            get:
                method: 'GET'
                normalization_context: {'groups': [team.list, team.leader, player.read.mini]}
            team-ranking-point-chart:
                method: 'GET'
                normalization_context: {'groups': [team.read.mini, team.rank.pointChart]}
                path: '/teams/ranking-point-chart'
                controller: 'VideoGamesRecords\CoreBundle\Controller\TeamController::rankingPointChart'
            team-ranking-point-game:
                method: 'GET'
                normalization_context: {'groups': [team.read.mini, team.rank.pointGame]}
                path: '/teams/ranking-point-game'
                controller: 'VideoGamesRecords\CoreBundle\Controller\TeamController::rankingPointGame'
            eam-ranking-point-game-top-5:
                method: 'GET'
                normalization_context: {'groups': [team.read.mini, team.rank.pointGame]}
                path: '/teams/ranking-point-game-top-5'
                controller: 'VideoGamesRecords\CoreBundle\Controller\TeamController::rankingPointGameTop5'
            team-ranking-medal:
                method: 'GET'
                normalization_context: {'groups': [team.read.mini, team.rank.medal]}
                path: '/teams/ranking-medal'
                controller: 'VideoGamesRecords\CoreBundle\Controller\TeamController::rankingMedal'
            team-ranking-cup:
                method: 'GET'
                normalization_context: {'groups': [team.read.mini, team.rank.cup]}
                path: '/teams/ranking-cup'
                controller: 'VideoGamesRecords\CoreBundle\Controller\TeamController::rankingCup'
            team-ranking-cup-top-5:
                method: 'GET'
                normalization_context: {'groups': [team.read.mini, team.rank.cup]}
                path: '/teams/ranking-cup-top-5'
                controller: 'VideoGamesRecords\CoreBundle\Controller\TeamController::rankingCupTop5'
            team-ranking-badge:
                method: 'GET'
                normalization_context: {'groups': [team.read.mini, team.rank.badge]}
                path: '/teams/ranking-badge'
                controller: 'VideoGamesRecords\CoreBundle\Controller\TeamController::rankingBadge'
            upload-avatar:
                access_control: 'is_granted("ROLE_USER")'
                method: 'POST'
                path: '/teams/upload-avatar'
                consumes:
                    - application/json
                swagger_context:
                    parameters:
                        -   in: body
                            name: file
                            description: Picture encoded in base64
                            schema:
                                type: object
                                required:
                                    - base64
                                properties:
                                    base64:
                                        type: string
                controller: 'VideoGamesRecords\CoreBundle\Controller\TeamController::uploadAvatar'
        itemOperations:
            get:
                normalization_context: {'groups': [team.read, team.leader, player.read.mini], 'enable_max_depth':true}
            put:
                access_control: 'is_granted("ROLE_PLAYER") and object.getLeader().getUser() == user'
                denormalization_context: {'groups': [team.put]}
                normalization_context: {'groups': [team.read, team.leader, player.read.mini]}
    VideoGamesRecords\CoreBundle\Entity\TeamBadge:
        collectionOperations:
            get:
                normalization_context: {'groups': [teamBadge.read, teamBadge.badge, badge.read]}
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\TeamChart:
        collectionOperations:
              get: ~
        itemOperations:
              get: ~
    VideoGamesRecords\CoreBundle\Entity\TeamGame:
        collectionOperations:
             get: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\TeamGroup:
        collectionOperations:
            get: ~
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\TeamRequest:
        collectionOperations:
            get:
                normalization_context: {'groups': [teamRequest.read, player.read.mini, team.read.mini]}
            post:
                access_control: 'is_granted("ROLE_PLAYER") and (object.getTeam().getLeader().getUser() == user)'
                denormalization_context: {'groups': [teamRequest.post]}
                normalization_context: {'groups': [teamRequest.read, player.read.mini, team.read.mini]}
        itemOperations:
            get:
                normalization_context: {'groups': [teamRequest.read, player.read.mini, team.read.mini]}
            put:
                access_control: 'is_granted("ROLE_PLAYER") and ((object.getTeam().getLeader().getUser() == user) or (object.getPlayer().getUser() == user))'
                denormalization_context: {'groups': [teamRequest.put]}
                normalization_context: {'groups': [teamRequest.read, player.read.mini, team.read.mini]}
    VideoGamesRecords\CoreBundle\Entity\Proof:
        collectionOperations:
            get: ~
            send-picture:
                access_control: 'is_granted("ROLE_PLAYER")'
                method: 'POST'
                path: '/player-charts/{id}/send-picture'
                consumes:
                    - application/json
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - in: body
                          name: file
                          description: Picture encoded in base64
                          schema:
                              type: object
                              required:
                                - base64
                              properties:
                                  base64:
                                    type: string
                controller: 'VideoGamesRecords\CoreBundle\Controller\PlayerChartController::sendPicture'
            send-video:
                access_control: 'is_granted("ROLE_PLAYER")'
                method: 'POST'
                path: '/player-charts/{id}/send-video'
                consumes:
                    - application/json
                swagger_context:
                    parameters:
                        - name: id
                          in: path
                          required: true
                          type: integer
                        - in: body
                          name: url
                          description: Video URL
                          schema:
                              type: text
                controller: 'VideoGamesRecords\CoreBundle\Controller\PlayerChartController::sendVideo'
        itemOperations:
            get:
                normalization_context: {'groups': [proof.read, picture.read]}
    VideoGamesRecords\CoreBundle\Entity\ProofRequest:
        shortName: 'ProofRequest'
        collectionOperations:
            get: ~
            post:
                access_control: 'is_granted("ROLE_PLAYER") and object.getPlayerChart().getStatus().getId() == 1'
                denormalization_context: {'groups': [proof.request.post]}
                normalization_context: {'groups': [proof.request.read]}
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\GameTopic:
        subresourceOperations:
            api_games_topics_get_subresource:
                method: 'GET'
                normalization_context: {'groups': [game.topic.list, player.read.mini]}
        collectionOperations:
            post:
                access_control: 'is_granted("ROLE_PLAYER")'
                denormalization_context: {'groups': [game.topic.post]}
                normalization_context: {'groups': [game.topic.read]}
        itemOperations:
            get: ~
    VideoGamesRecords\CoreBundle\Entity\GameMessage:
        collectionOperations:
            get:
                method: 'GET'
                normalization_context: {'groups': [game.message.list, player.read.mini, game.topic.read, game.read.mini]}
            post: ~
        itemOperations:
            get: ~
            put:
                access_control: 'is_granted("ROLE_PLAYER")'
                denormalization_context: {'groups': [game.message.put]}
                normalization_context: {'groups': [game.message.read]}
    VideoGamesRecords\CoreBundle\Entity\Video:
        subresourceOperations:
            api_games_videos_get_subresource:
                method: 'GET'
                normalization_context: {'groups': [video.read, player.read.mini]}
        collectionOperations:
            get:
                normalization_context: {'groups': [video.read, player.read.mini, game.read.mini]}
            post:
                access_control: 'is_granted("ROLE_PLAYER")'
                denormalization_context: {'groups': [video.post]}
                normalization_context: {'groups': [video.read, player.read.mini, game.read.mini]}
        itemOperations:
            get:
                normalization_context: {'groups': [video.read, player.read.mini, game.read.mini, game.platforms, platform.read]}
            put:
                access_control: 'is_granted("ROLE_PLAYER") and object.getPlayer().getUser() == user'
                denormalization_context: {'groups': [video.put]}
                normalization_context: {'groups': [video.read, player.read.mini, game.read.mini]}
        properties:
            comments:
                subresource:
                    maxDepth: 1
                    collection: true
    VideoGamesRecords\CoreBundle\Entity\VideoComment:
        shortName: 'VideoComment'
        subresourceOperations:
            api_videos_comments_get_subresource:
                method: 'GET'
                normalization_context: {'groups': [video.comment.read, video.comment.player, player.read.mini]}
        collectionOperations:
            get:
                normalization_context: {'groups': [video.comment.read, video.comment.player, player.read.mini]}
            post:
                access_control: 'is_granted("ROLE_PLAYER")'
                denormalization_context: {'groups': [video.comment.post]}
                normalization_context: {'groups': [video.comment.read, video.comment.player, player.read.mini]}
        itemOperations:
            get:
                normalization_context: {'groups': [video.comment.read]}
    VideoGamesRecords\CoreBundle\Entity\LostPosition:
        collectionOperations:
            get:
                normalization_context: {'groups': [lostPosition.read, chart.read.mini, chart.group, group.read.mini, group.game, game.read.mini]}
        itemOperations:
            get:
                normalization_context: {'groups': [lostPosition.read]}
            delete:
                access_control: 'is_granted("ROLE_PLAYER") and object.getPlayer().getUser() == user'
                denormalization_context: {'groups': [lostPosition.delete]}